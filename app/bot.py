# app/bot.py
import os
from dotenv import load_dotenv
load_dotenv()
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from decimal import Decimal
from sqlalchemy.orm import joinedload, selectinload 
from sqlalchemy import select
from typing import Callable, Dict, Any, Awaitable
from aiogram.dispatcher.middlewares.base import BaseMiddleware

from . import crud, schemas, models
from .database import AsyncSessionLocal



# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –∏–ª–∏ –ª—É—á—à–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

admin_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")],
    [KeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã")],
], resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
tech_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚öôÔ∏è –ò–Ω—Å–ø–µ–∫—Ü–∏—è")],
], resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ü—Ä–æ–¥–∞–≤—Ü–∞
sales_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"), KeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")],
    [KeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã"), KeyboardButton(text="‚öôÔ∏è –ò–Ω—Å–ø–µ–∫—Ü–∏—è")]
], resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

@dp.message(Command('whoami'))
async def who_am_i(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID –≤ —Å–≤–æ–µ–π –ë–î."""
    user_id_to_check = message.from_user.id

    async with AsyncSessionLocal() as session:
        stmt = select(models.Users).options(selectinload(models.Users.role)).filter(models.Users.telegram_id == user_id_to_check)
        result = await session.execute(stmt)
        user = result.scalars().first()

    if user:
        await message.answer(f"‚úÖ –Ø –Ω–∞—à–µ–ª –≤–∞—Å –≤ –±–∞–∑–µ!\nUsername: {user.username}\n–†–æ–ª—å: {user.role.role_name if user.role else '–ù–µ—Ç —Ä–æ–ª–∏'}")
    else:
        await message.answer(f"‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID {user_id_to_check} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∫ –∫–æ—Ç–æ—Ä–æ–π —è –ø–æ–¥–∫–ª—é—á–µ–Ω.")

# --- –õ–û–ì–ò–ö–ê –û–ü–õ–ê–¢–´ (–ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô) ---
class Payment(StatesGroup):
    waiting_for_amount = State()
    waiting_for_account = State()

class DbUserMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.Update,
        data: Dict[str, Any]
    ) -> Any:

        from_user = None
        if event.message:
            from_user = event.message.from_user
        elif event.callback_query:
            from_user = event.callback_query.from_user

        # --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ---
        print("\n--- DEBUG MIDDLEWARE ---")
        if from_user:
            print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç Telegram ID: {from_user.id}") # <-- –ù–û–í–ê–Ø –°–¢–†–û–ö–ê
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è.")
        # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ---

        db_user = None
        if from_user:
            async with AsyncSessionLocal() as session:
                stmt = select(models.Users).options(
                    joinedload(models.Users.role)
                    .joinedload(models.Roles.role_permissions)
                    .joinedload(models.RolePermissions.permission)
                ).filter(models.Users.telegram_id == from_user.id)
                result = await session.execute(stmt)
                db_user = result.unique().scalars().first()

        if db_user:
            print(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î: {db_user.username}")
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –ù–ï –ù–ê–ô–î–ï–ù.")
        print("--- END DEBUG ---\n")

        data['db_user'] = db_user
        return await handler(event, data)
    
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Middleware
dp.update.middleware.register(DbUserMiddleware())

def user_has_permission(user: models.Users, permission_code: str) -> bool:
    if not user or not user.role or not hasattr(user.role, 'role_permissions'):
        return False
    user_permissions = {rp.permission.code for rp in user.role.role_permissions if rp.permission}
    return permission_code in user_permissions

@dp.message(Command('cancel'))
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
@dp.message(CommandStart())
async def send_welcome(message: Message, db_user: models.Users):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏.
    """
    if not db_user:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ resale.\n"
            "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –¥–ª—è –≤–∞—Å."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if user_has_permission(db_user, 'manage_inventory'): # –ü—Ä–∞–≤–æ –µ—Å—Ç—å —É –ê–¥–º–∏–Ω–∞/–ú–µ–Ω–µ–¥–∂–µ—Ä–∞
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {db_user.name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_keyboard)
    elif user_has_permission(db_user, 'perform_inspections'): # –ü—Ä–∞–≤–æ –µ—Å—Ç—å —É –¢–µ—Ö–Ω–∏–∫–∞
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {db_user.name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=tech_keyboard)
    elif user_has_permission(db_user, 'perform_sales'):
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {db_user.name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=sales_keyboard)
    else:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {db_user.name}! –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")



@dp.message(Command('link'))
async def link_user_account(message: Message, command: CommandObject, db_user: models.Users):
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /link <–ª–æ–≥–∏–Ω_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>
    """
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not db_user or not user_has_permission(db_user, 'manage_users'):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message or not message.reply_to_message.forward_from:
        await message.reply("–û—à–∏–±–∫–∞: –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
    app_username = command.args
    if not app_username:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /link ivanov_ivan")
        return

    # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    telegram_id_to_link = message.reply_to_message.forward_from.id
    telegram_name = message.reply_to_message.forward_from.full_name

    async with AsyncSessionLocal() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ –ª–æ–≥–∏–Ω—É –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        user_to_link = await crud.get_user_by_username(session, app_username)

        if not user_to_link:
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '{app_username}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É Telegram ID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        user_to_link.telegram_id = telegram_id_to_link
        await session.commit()

        await message.reply(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{telegram_name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É '{app_username}'.")



@dp.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
async def list_pending_orders_handler(message: Message, db_user: models.Users):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã (—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É)."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã
    if not user_has_permission(db_user, 'receive_supplier_orders'):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã."""
    async with AsyncSessionLocal() as session:
        orders = await crud.get_supplier_orders(session)
        pending_orders = [
            o for o in orders 
            if o.status.value == '–ü–û–õ–£–ß–ï–ù' and o.delivery_payment_status.value != '–û–ü–õ–ê–ß–ï–ù'
        ]

        if not pending_orders:
            await message.answer("–ó–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã, –Ω–µ—Ç.")
            return

        for order in pending_orders:
            total_cost = sum(d.price * d.quantity for d in order.supplier_order_details)
            supplier_name = order.supplier.name if order.supplier else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫"

            text = (
                f"üì¶ **–ó–∞–∫–∞–∑ ID: {order.id}**\n"
                f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}\n"
                f"–°—É–º–º–∞: **{total_cost:.2f} —Ä—É–±.**"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", callback_data=f"pay_{order.id}")]
            ])
            await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ò –í–í–û–î–ê –î–ê–ù–ù–´–• ---
@dp.callback_query(lambda c: c.data and c.data.startswith('pay_'))
async def process_payment_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏."""
    order_id = int(callback_query.data.split('_')[1])
    await state.update_data(order_id=order_id)
    await state.set_state(Payment.waiting_for_amount)
    await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ID: {order_id}")
    await callback_query.answer()

@dp.message(Payment.waiting_for_amount)
async def process_amount_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—á–µ—Ç."""
    try:
        amount = Decimal(message.text)
        await state.update_data(amount=amount)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        async with AsyncSessionLocal() as session:
            accounts = await crud.get_accounts(session)

        if not accounts:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—á–µ—Ç–∞–º–∏
        buttons = [[InlineKeyboardButton(text=acc.name, callback_data=f"account_{acc.id}")] for acc in accounts]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await state.set_state(Payment.waiting_for_account)
        await message.answer("–° –∫–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É?", reply_markup=keyboard)

    except (ValueError, TypeError):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã.")

@dp.callback_query(Payment.waiting_for_account)
async def process_account_selected(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞."""
    account_id = int(callback_query.data.split('_')[1])
    user_data = await state.get_data()
    order_id = user_data['order_id']

    try:
        async with AsyncSessionLocal() as session:
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

            # 1. –ù–∞—Ö–æ–¥–∏–º —Å–∞–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            order_to_update_stmt = select(models.SupplierOrders).where(models.SupplierOrders.id == order_id)
            order_result = await session.execute(order_to_update_stmt)
            order_to_update = order_result.scalars().first()

            if not order_to_update:
                await bot.send_message(callback_query.from_user.id, f"‚ùå –û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                await callback_query.answer()
                return

            # 2. –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—ç—Ç–æ—Ç –∫–æ–¥ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å)
            sdek_stmt = select(models.Counterparties).where(models.Counterparties.name == '–°–î–≠–ö')
            sdek_result = await session.execute(sdek_stmt)
            sdek_counterparty = sdek_result.scalars().first()

            if not sdek_counterparty:
                await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç '–°–î–≠–ö' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                await state.clear()
                await callback_query.answer()
                return

            # 2. –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏"
            stmt = select(models.OperationCategories).where(models.OperationCategories.name == '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏')
            result = await session.execute(stmt)
            transport_category = result.scalars().first()

            if not transport_category:
                await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
                await state.clear()
                await callback_query.answer()
                return

            # 3. –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (—ç—Ç–æ—Ç –∫–æ–¥ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å)
            cash_flow_data = schemas.CashFlowCreate(
                operation_categories_id=transport_category.id,
                account_id=account_id,
                counterparty_id=sdek_counterparty.id,
                amount=-abs(user_data['amount']),
                description=f"–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–°–î–≠–ö) –ø–æ –∑–∞–∫–∞–∑—É ID {order_id}"
            )
            await crud.create_cash_flow(db=session, cash_flow=cash_flow_data, user_id=1) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è user_id=1 –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

            # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —É –∑–∞–∫–∞–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            order_to_update.delivery_payment_status = models.OrderPaymentStatus.–û–ü–õ–ê–ß–ï–ù
            await session.commit()

            await bot.send_message(
                callback_query.from_user.id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–°–î–≠–ö) –ø–æ –∑–∞–∫–∞–∑—É ID {user_data['order_id']} –Ω–∞ —Å—É–º–º—É {user_data['amount']} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!"
            )
    except Exception as e:
        await bot.send_message(
            callback_query.from_user.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ: {e}"
        )
    finally:
        await state.clear()
        await callback_query.answer()